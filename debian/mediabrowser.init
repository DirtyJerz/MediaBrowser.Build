#!/bin/sh
### BEGIN INIT INFO
# Provides:          mediabrowser
# Required-Start:    $local_fs $network $remote_fs
# Required-Stop:     $local_fs $network $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: starts instance of MediaBrowser Server
# Description:       starts instance of MediaBrowser Server using start-stop-daemon
### END INIT INFO

# Author: HurricaneHernandez <carlos@techbyte.ca>

PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC=MediaBrowserServer             
NAME=mediabrowser             
SCRIPTNAME=/etc/init.d/$NAME

# Source MediaBrowser configuration
if [ -f /etc/default/$NAME ]; then
    . /etc/default/$NAME
else
    echo "/etc/default/${NAME} not found using default settings.";
fi

## Don't edit this file
## Edit user configuation in /etc/default/mediabrowser to change
##
## MB_USER=         #$RUN_AS, username to run mediabrowser under, the default is mediabrowser
## MB_HOME=         #$APP_PATH, the location of MediaBrowser.Server.Mono.exe, the default is /opt/mediabrowser
## MB_DATA=         #$DATA_DIR, the location of MediaBrowser data, cache, logs, the default is /usr/lib/mediabrowser
## MB_PIDFILE=      #$PID_FILE, the location of mediabrowser.pid, the default is /var/run/mediabrowser/mediabrowser.pid
## MB_EXEC=         #$MB_EXEC, the name of the MediaBrowser Server exectuable, the default is MediaBrowser.Server.Mono.exe
## MB_OPTS=         #$MB_OPTS, andy options that need to pass to the MediaBrowserServer executable, the default is -programdata $MB_DATA
## MONO_BIN=        #$MONO_BIN, the location oth mono binary, the default is /usr/bin/mono
##
## EXAMPLE if want to run as different user
## add MB_USER=username to /etc/default/mediabrowser
## otherwise default mediabrowser is used

## The defaults
# Run as username
USER=${MB_USER-mediabrowser}

# Data directory where MediaBrowser database, cache and logs are stored
PROGRAMDATA=${MB_DATA-/usr/lib/mediabrowser}

# Path to store PID file
PIDFILE=${MB_PIDFILE-/var/run/mediabrowser.pid}

# Path to app MB_HOME=path_to_app_MediaBrowser.Server.Mono.exe
DAEMON_PATH=${MB_HOME-/opt/mediabrowser}

# path to mono bin
DAEMON=${MONO_BIN-/usr/bin/mono}

# Name of executable for application
DAEMON_ARGS=${MB_EXEC-MediaBrowser.Server.Mono.exe}

# MediaBrowser options
DAEMON_OPTS=${MB_OPTS-"-programdata $PROGRAMDATA"}                

##

PID_PATH=`dirname $PIDFILE`


# Exit if the package is not installed
[ -x $DAEMON ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

#
# Function that checks if the daemon/service is started
#
is_running()
{
        # returns 0 when running, 1 otherwise
        PID="$(pgrep -f -x -u $USER "$DAEMON $DAEMON_ARGS.*")"
        RET=$?
        [ $RET -gt 1 ] && {
                log_failure_msg "$DESC: fatal pgrep error ($RET), aborting";
                exit 1; }
        return $RET
}

#
# Function that checks if the return value of the start stop  daemon/service
#
check_retval()
{
    case "$?" in
        0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
        2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
}

#
# Function that starts the daemon/service
#
do_start()
{
    # Return
    #   0 if daemon has been started
    #   1 if daemon was already running
    #   2 if daemon could not be started
    start-stop-daemon --start --quiet --make-pidfile --pidfile $PIDFILE \
        --background -d $DAEMON_PATH -c $USER \
        --exec $DAEMON -- $DAEMON_ARGS $DAEMON_OPTS > /dev/null \
        || return 2
    RETVAL="$?"
    [ "$RETVAL" = 2 ] && return 2
    # create a pidfile, not used but provided for monitoring apps
    [ -w $PIDFILE ] && \
        echo "$PID" > $PIDFILE
    return "$RETVAL"
}

#
# Function that stops the daemon/service
#
do_stop()
{
    # Return
    #   0 if daemon has been stopped
    #   1 if daemon was already stopped
    #   2 if daemon could not be stopped
    #   other if a failure occurred
    TMPFILE=$(mktemp /tmp/mediabrowser.XXXXXXXXXX || exit 1)
    trap '[ -f $TMPFILE ] && rm -f $TMPFILE' EXIT
    echo "$PID" > $TMPFILE
    start-stop-daemon --stop --quiet -user $USER --retry=TERM/30/KILL/5 --pidfile $TMPFILE
    RETVAL="$?"
    [ "$RETVAL" = 2 ] && return 2
    # Many daemons don't delete their pidfiles when they exit.
    [ -f $PIDFILE ] && rm -f $PIDFILE
    return "$RETVAL"
}

# Create PID directory if not exist and ensure the mediabrowser user can write to it
if [ ! -d $PID_PATH ]; then
    mkdir -p $PID_PATH
    chown $USER $PID_PATH
fi

if [ ! -d $PROGRAMDATA ]; then
    mkdir -p $PROGRAMDATA
    chown $USER $PROGRAMDATA
fi

if [ -e $PIDFILE ]; then
    PID=`cat $PIDFILE`
    if ! kill -0 $PID > /dev/null 2>&1; then
        echo "Removing stale $PIDFILE"
        rm $PIDFILE
    fi
fi

case "$1" in
    start)
        if ! is_running; then
            [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC " "$NAME"
            do_start
            check_retval
        else
            log_success_msg "$DESC: already running (pid $PID)"
        fi
    ;;
    stop)
        if is_running; then
            [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
            do_stop
            check_retval
        else
            log_success_msg "$DESC: not running"
        fi
    ;;
    status)
       status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
    ;;
    restart|force-reload)
        $0 stop || exit $?
        $0 start || exit $?
    ;;
    *)
        echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
        exit 3
    ;;
esac
